{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "[deployment().properties.templateLink.uri]"
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
			},
			"defaultValue": ""
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		},
		"adminUsername": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "User name for the Virtual Machine."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"dnsLabelPrefix": {
			"defaultValue": "wls",
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"keyType": {
			"type": "string",
			"defaultValue": "PKCS12",
			"allowedValues": [
				"JKS",
				"PKCS12"
			],
			"metadata": {
				"description": "Provide Key type is JKS or PKCS12 signed certificates. Default is PKCS12 format"
			}
		},
		"keyVaultName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "KeyVault Name where certificates are stored"
			}
		},
		"keyVaultResourceGroup": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Resource group name in current subscription containing the KeyVault"
			}
		},
		"keyVaultSSLCertDataSecretName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data"
			}
		},
		"keyVaultSSLCertPasswordSecretName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"ohsComponentName": {
			"defaultValue": "ohs_azure",
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server component name"
			}
		},
		"ohsDomainName": {
			"defaultValue": "ohsStandaloneDomain",
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server domain name"
			}
		},
		"ohsNMPassword": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Password for Oracle HTTP Server NodeManager"
			}
		},
		"ohsNMUser": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server NodeManager user name"
			}
		},
		"ohsSkuUrnVersion": {
			"type": "string",
			"defaultValue": "ohs-122140-jdk8-ol76;ohs-122140-jdk8-ol76;latest",
			"allowedValues": [
				"ohs-122140-jdk8-ol76;ohs-122140-jdk8-ol76;latest",
				"ohs-122140-jdk8-ol74;ohs-122140-jdk8-ol74;latest",
				"ohs-122140-jdk8-ol73;ohs-122140-jdk8-ol73;latest"
			],
			"metadata": {
				"description": "The Oracle Linux image with Oracle HTTP Server and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
			}
		},
		"ohsVMName": {
			"defaultValue": "ohsVM",
			"type": "string",
			"metadata": {
				"description": "Oracle HTTP Server hosting VM name."
			}
		},
		"ohshttpPort": {
			"defaultValue": "7777",
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server, HTTP port"
			}
		},
		"ohshttpsPort": {
			"defaultValue": "4444",
			"type": "string",
			"metadata": {
				"description": "Provide Oracle HTTP Server, HTTPS port"
			}
		},
		"oracleVaultPswd": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Password for Oracle Vault store"
			}
		},
		"ohsSSLConfigAccessOption": {
			"type": "string",
			"metadata": {
				"description": "Options to provide required configuration for SSL configuration"
			},
			"allowedValues": [
				"uploadConfig",
				"keyVaultStoredConfig"
			],
			"defaultValue": "keyVaultStoredConfig"
		},
		"uploadedKeyStoreData": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Base64 encoded SSL Certificate Data"
			}
		},
		"uploadedKeyStorePassword": {
			"defaultValue": "[newGuid()]",
			"type": "securestring",
			"metadata": {
				"description": "Password of the SSL Certificate Data"
			}
		},
		"vmSizeSelect": {
			"defaultValue": "Standard_A1",
			"type": "string",
			"metadata": {
				"description": "Select appropriate VM Size as per requirement"
			}
		},
		"utcValue": {
			"type": "string",
			"defaultValue": "[utcNow()]",
			"metadata": {
				"description": "Current deployment time. Used as a tag in deployment script."
			}
		},
		"storageAccountName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Provide existing WebLogic deployment resource group storage account name"
			}
		},
		"virtualNetworkName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Provide existing WebLogic deployment resource group virtual network name"
			}
		},
		"networkSecurityGroup" :{
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Provide existing WebLogic deployed resource group network security group name"
			}
		},
		"wlsAdminVMName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Provide WebLogic admin server hosted VM computer name"
			}
		},
		"wlsPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Weblogic domain name"
			}
		},
		"wlsUserName": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "Username for your Weblogic domain name"
			}
		},
		"keyVaultSku": {
			"defaultValue": "Standard",
			"type": "string",
			"metadata": {
				"description": "Price tier for Key Vault."
			}
		}
	},
	"variables": {
		"const_ohsSSLConfigAccessOptionUploadConfig": "uploadConfig",
		"const_ohsSSLConfigAccessOptionKeyVaultStoredConfig": "keyVaultStoredConfig",
		"const_currentSubscription": "[subscription().subscriptionId]",
		"name_ohsLinkedTemplateName": "ohsNestedTemplate.json",
		"name_ohsKeyVaultNestedTemplate": "_ohsKeyVaultNestedTemplate.json",
		"name_keyVaultName": "[take(concat('wls-kv', uniqueString(parameters('utcValue'))), 24)]",
		"name_adminURL": "[concat('http://',parameters('wlsAdminVMName'),':7005')]",
		"name_adminRestMgmtURL": "[concat(variables('name_adminURL'),'/management/weblogic/latest')]"
	},
	"resources": [
		{
			"name": "ohsKeyVaultNestedTemplate",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"condition": "[equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionUploadConfig'))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_ohsKeyVaultNestedTemplate')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"uploadedKeyStoreData": {
						"value": "[parameters('uploadedKeyStoreData')]"
					},
					"uploadedKeyStorePassword": {
						"value": "[parameters('uploadedKeyStorePassword')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"sku": {
						"value": "[parameters('keyVaultSku')]"
					},
					"keyVaultName": {
						"value": "[variables('name_keyVaultName')]"
					}
				}
			}
		},
		{
			"name": "ohsLinkedTemplate",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'ohsKeyVaultNestedTemplate')]"
			],
			"apiVersion": "${azure.apiVersion}",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_ohsLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"storageAccountName": {
						"value": "[parameters('storageAccountName')]"
					},
					"networkSecurityGroup": {
						"value": "[parameters('networkSecurityGroup')]"					
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"ohsComponentName": {
						"value": "[parameters('ohsComponentName')]"
					},
					"ohsDomainName": {
						"value": "[parameters('ohsDomainName')]"
					},
					"ohsNMPassword": {
						"value": "[parameters('ohsNMPassword')]"
					},
					"ohsNMUser": {
						"value": "[parameters('ohsNMUser')]"
					},
					"ohsSkuUrnVersion": {
						"value": "[parameters('ohsSkuUrnVersion')]"
					},
					"ohsVMName": {
						"value": "[parameters('ohsVMName')]"
					},
					"ohshttpPort": {
						"value": "[parameters('ohshttpPort')]"
					},
					"ohshttpsPort": {
						"value": "[parameters('ohshttpsPort')]"
					},
					"ohsSSLKeystoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultSSLCertDataSecretName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyStoreDataSecretName.value)]"
						}
					},
					"ohsSSLKeystorePassword": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultSSLCertPasswordSecretName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyStorePwdSecretName.value)]"
						}
					},
					"oracleVaultPswd": {
						"value": "[parameters('oracleVaultPswd')]"
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"vmSizeSelect": {
						"value": "[parameters('vmSizeSelect')]"
					},
					"adminRestMgmtURL": {
						"value": "[variables('name_adminRestMgmtURL')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"keyType": {
						"value": "[parameters('keyType')]"
					}
				}
			}
		}
	],
	"outputs": {
		"ohsAccessURL": {
			"type": "string",
			"value": "[reference('ohsLinkedTemplate', '${azure.apiVersion}').outputs.ohsAccessURL.value]"
		},
		"ohsSecureAccessURL": {
			"type": "string",
			"value": "[reference('ohsLinkedTemplate', '${azure.apiVersion}').outputs.ohsSecureAccessURL.value]"
		}
	}
}
